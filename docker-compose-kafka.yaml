version: '2'

networks:
  mymarket:
    external:
      name: my-net

services:
  ca.store1.mymarket.com:
    image: hyperledger/fabric-ca
    environment:
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.store1.mymarket.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.store1.mymarket.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/3e65b11669a1ff9b8a3a5c68b8fa236753920bc1c4652652c7ea737bf73211dd_sk
    ports:
      - "17054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./crypto-config/peerOrganizations/store1.mymarket.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca.store1.mymarket.com
    networks:
      - mymarket

  ca.store2.mymarket.com:
    image: hyperledger/fabric-ca
    environment:
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.store2.mymarket.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.store2.mymarket.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/a2ba7d0c3291abbf4115a51ce29ba869fac7b56d29b32d86b60eafc7886e45af_sk
    ports:
      - "27054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./crypto-config/peerOrganizations/store2.mymarket.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca.store2.mymarket.com
    networks:
      - mymarket

  ca.mymarket.com:
    image: hyperledger/fabric-ca
    environment:
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.mymarket.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.mymarket.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/d60a237adac1321c32fc6c1db14075b65783adb738e27c5f3045a01ab87f6551_sk
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./crypto-config/ordererOrganizations/mymarket.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca.mymarket.com
    networks:
      - mymarket

  zookeeper0:
    image: hyperledger/fabric-zookeeper
    restart: always
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    ports:
      - '2181'
      - '2888'
      - '3888'
    container_name: zookeeper0
    networks:
      - mymarket

  zookeeper1:
    image: hyperledger/fabric-zookeeper
    restart: always
    environment:
      - ZOO_MY_ID=2
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    ports:
      - '2181'
      - '2888'
      - '3888'
    container_name: zookeeper1
    networks:
      - mymarket

  zookeeper2:
    image: hyperledger/fabric-zookeeper
    restart: always
    environment:
      - ZOO_MY_ID=3
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    ports:
      - '2181'
      - '2888'
      - '3888'
    container_name: zookeeper2
    networks:
      - mymarket

  kafka0:
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      - KAFKA_BORKER_ID=0
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 *1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_UNCLEAN_LEADER_LECTION_ENABLE=false
    ports:
      - '19092:9092'
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    container_name: kafka0
    networks:
      - mymarket

  kafka1:
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      - KAFKA_BORKER_ID=1
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 *1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_UNCLEAN_LEADER_LECTION_ENABLE=false
    ports:
      - '19093:9092'
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    container_name: kafka1
    networks:
      - mymarket

  kafka2:
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      - KAFKA_BORKER_ID=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 *1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_UNCLEAN_LEADER_LECTION_ENABLE=false
    ports:
      - '19094:9092'
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    container_name: kafka2
    networks:
      - mymarket

  kafka3:
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      - KAFKA_BORKER_ID=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 *1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_UNCLEAN_LEADER_LECTION_ENABLE=false
    ports:
      - '19095:9092'
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    container_name: kafka3
    networks:
      - mymarket

  orderer.mymarket.com:
    container_name: orderer.mymarket.com
    image: hyperledger/fabric-orderer
    environment:
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/artifacts/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=HeadquaterMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    volumes:
      - ./channel-artifacts:/var/hyperledger/orderer/artifacts
      - ./crypto-config/ordererOrganizations/mymarket.com/orderers/orderer0.mymarket.com/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/mymarket.com/orderers/orderer0.mymarket.com/tls:/var/hyperledger/orderer/tls
    command: orderer
    ports:
      - '7050:7050'
    networks:
      - mymarket

  orderer0.mymarket.com:
    container_name: orderer0.mymarket.com
    image: hyperledger/fabric-orderer
    environment:
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/artifacts/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=HeadquaterMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    volumes:
      - ./channel-artifacts:/var/hyperledger/orderer/artifacts
      - ./crypto-config/ordererOrganizations/mymarket.com/orderers/orderer0.mymarket.com/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/mymarket.com/orderers/orderer0.mymarket.com/tls:/var/hyperledger/orderer/tls
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - '7050:7050'
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3
    networks:
      - mymarket

  orderer1.mymarket.com:
    container_name: orderer1.mymarket.com
    image: hyperledger/fabric-orderer
    environment:
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/artifacts/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=HeadquaterMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    volumes:
      - ./channel-artifacts:/var/hyperledger/orderer/artifacts
      - ./crypto-config/ordererOrganizations/mymarket.com/orderers/orderer1.mymarket.com/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/mymarket.com/orderers/orderer1.mymarket.com/tls:/var/hyperledger/orderer/tls
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - '17050:7050'
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3
    networks:
      - mymarket


  orderer2.mymarket.com:
    container_name: orderer2.mymarket.com
    image: hyperledger/fabric-orderer
    environment:
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/artifacts/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=HeadquaterMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    volumes:
      - ./channel-artifacts:/var/hyperledger/orderer/artifacts
      - ./crypto-config/ordererOrganizations/mymarket.com/orderers/orderer2.mymarket.com/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/mymarket.com/orderers/orderer2.mymarket.com/tls:/var/hyperledger/orderer/tls
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - '27050:7050'
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3
    networks:
      - mymarket

  peer0.store1.mymarket.com:
    container_name: peer0.store1.mymarket.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - CORE_PEER_ADDRESSAUTODETECT=true
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_NETWORKID=dev
      - CORE_PEER_TLS_ENABLED=true
      # This disables mutual auth for gossip
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_ID=peer0.store1.mymarket.com
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.store1.mymarket.com:7051
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_PEER_LOCALMSPID=Store1MSP
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
    ports:
      - '7051:7051'
      - '7053:7053'
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ./crypto-config/peerOrganizations/store1.mymarket.com/peers/peer0.store1.mymarket.com/msp:/etc/hyperledger/fabric/msp
      - ./crypto-config/peerOrganizations/store1.mymarket.com/peers/peer0.store1.mymarket.com/tls:/etc/hyperledger/fabric/tls
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    networks:
      - mymarket
    command: peer node start

  peer1.store1.mymarket.com:
    container_name: peer1.store1.mymarket.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - CORE_PEER_ADDRESSAUTODETECT=true
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_NETWORKID=dev
      - CORE_PEER_TLS_ENABLED=true
      # This disables mutual auth for gossip
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_ID=peer1.store1.mymarket.com
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.store1.mymarket.com:7051
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_PEER_LOCALMSPID=Store1MSP
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
    ports:
      - '27051:7051'
      - '27053:7053'
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ./crypto-config/peerOrganizations/store1.mymarket.com/peers/peer1.store1.mymarket.com/msp:/etc/hyperledger/fabric/msp
      - ./crypto-config/peerOrganizations/store1.mymarket.com/peers/peer1.store1.mymarket.com/tls:/etc/hyperledger/fabric/tls
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    networks:
      - mymarket
    command: peer node start

  peer0.store2.mymarket.com:
    container_name: peer0.store2.mymarket.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCOFIG_NETWORKMODE=mymarket_mymarket
      - CORE_PEER_ADDRESSAUTODETECT=true
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_NETWORKID=dev
      - CORE_PEER_TLS_ENABLED=true
      # This disables mutual auth for gossip
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_ID=peer0.store2.mymarket.com
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.store2.mymarket.com:7051
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_PEER_LOCALMSPID=Store2MSP
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
    ports:
      - '37051:7051'
      - '37053:7053'
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ./crypto-config/peerOrganizations/store2.mymarket.com/peers/peer0.store2.mymarket.com/msp:/etc/hyperledger/fabric/msp
      - ./crypto-config/peerOrganizations/store2.mymarket.com/peers/peer0.store2.mymarket.com/tls:/etc/hyperledger/fabric/tls
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    networks:
      - mymarket
    command: peer node start

  peer1.store2.mymarket.com:
    container_name: peer1.store2.mymarket.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - CORE_PEER_ADDRESSAUTODETECT=true
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_NETWORKID=dev
      - CORE_PEER_TLS_ENABLED=true
      # This disables mutual auth for gossip
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_ID=peer1.store2.mymarket.com
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.store2.mymarket.com:7051
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_PEER_LOCALMSPID=Store2MSP
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
    ports:
      - '47051:7051'
      - '47053:7053'
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ./crypto-config/peerOrganizations/store2.mymarket.com/peers/peer1.store2.mymarket.com/msp:/etc/hyperledger/fabric/msp
      - ./crypto-config/peerOrganizations/store2.mymarket.com/peers/peer1.store2.mymarket.com/tls:/etc/hyperledger/fabric/tls
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    networks:
      - mymarket
    command: peer node start

  cli:
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    stdin_open: true
    environment:
      - CHANNEL_NAME=mymarketchannel
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      #- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mymarket_mymarket
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.store1.mymarket.com:7051
      - CORE_PEER_LOCALMSPID=Store1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/store1.mymarket.com/peers/peer0.store1.mymarket.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/store1.mymarket.com/peers/peer0.store1.mymarket.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/store1.mymarket.com/peers/peer0.store1.mymarket.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/store1.mymarket.com/users/Admin@store1.mymarket.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash #-c "scripts/scripts.sh mymarketcc"
    volumes:
      - /var/run/:/host/var/run/
      - ./chaincode/:/opt/gopath/src/github.com/chaincode
      - ./scripts/:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts
      - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    networks:
      - mymarket
